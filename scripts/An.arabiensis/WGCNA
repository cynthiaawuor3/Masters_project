
#import dataset------------------------------------------------------------------------------------------------------------------------------------------------------
merged_ara <- read_excel("merged_ara.xlsx") #("Data/Anopheles_arabiensis/merged_ara")

#filtering the annotated file
noncoding <- dplyr::filter(merged_ara,grepl('ncRNA',merged_ara$`Gene Type`))
filtered <- dplyr::filter(merged_ara,!grepl('ncRNA',merged_ara$`Gene Type`))
filtered <- dplyr::filter(filtered,!grepl('translation|pre-mRNA|tRNA|spliceosomal RNA|microRNA|small nucleolar|snRNA|ribosomal|tRNA',filtered$`Product Description`))

#input data----------------------------------------------------------------------------------------------------------------------------------------------------------
expressiondata = filtered[,-(2:3)]   #remove the annotation columns and remain only with read counts and geneid
de_input = as.matrix(expressiondata[,-1,])
row.names(de_input) = expressiondata$Geneid

meta_df <- data.frame( Sample = names(expressiondata[-1])) %>%
  mutate(
    Type = gsub("-.*","", Sample) %>% gsub("[.].*","", .)
  ) #get shorter treatment names

#filter low counts and create a new format of expression data for WGCNA 
keep <- apply(de_input, 1, max) >= 10
de_input <- de_input[keep,]
expressiondata <- de_input

# obtain logCPM unnormalized for plotting purposes -------------------------------------------------------------------------------------------------------------------
# Here, the norm.factors value is 1 for all samples
logcpm.unnorm.counts <-cpm(expressiondata, log = TRUE, prior.count = 2, normalized.lib.sizes = TRUE)

# Normalize for composition bias using TMM ---------------------------------------------------------------------------------------------------------------------------
filtered.counts <-calcNormFactors(expressiondata, method ='TMM')

# Convert counts per million per gene to log counts per million for further downstream analysis.
logcpm.norm.counts <-cpm(expressiondata, log = TRUE, prior.count = 2, normalized.lib.sizes = TRUE)
logcpm.norm.counts <- t(logcpm.norm.counts)

#Group data in a dendogram to check outliers--------------------------------------------------------------------------------------------------------------------------
sampleTree = hclust(dist(logcpm.norm.counts), method = "average")
par(cex = 0.6)
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, 
     cex.axis = 1.5, cex.main = 2)

#cutoff----------------------------------------------------------------------------------------------------------------------------------------------------------------
clust = cutreeStatic(sampleTree, cutHeight = 500,minSize = 01)
table(clust)

#Cluster  contains the samples we want to keep.
keepSamples = (clust==1)
network.counts = logcpm.norm.counts[keepSamples, ]

nGenes = ncol(network.counts)
nSamples = nrow(network.counts)


# determine the soft-thresholding power to use-------------------------------------------------------------------------------------------------------------------------
sizeGrWindow(9, 5)
par(mfrow = c(1,2))
cex1 = 0.9
powers <- c(c(1:10), seq(from = 12, to=20, by=2))
sft <- pickSoftThreshold(network.counts, powerVector = powers, verbose = 5)

#Index the scale free topology adjust as a function of the power soft thresholding-------------------------------------------------------------------------------------
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
     main = paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=0.9,col="red")
# this line corresponds to using an R^2 cut-off of h
abline(h=0.85,col="red")

#Connectivity mean as a function of soft power thresholding------------------------------------------------------------------------------------------------------------
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
     main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=0.9,col="red")

# construct adjacency matrix-------------------------------------------------------------------------------------------------------------------------------------------
softpower <- 20
adjacency.matrix <- adjacency(network.counts, power=softpower,
                              type = "signed", corFnc = "cor")

# Turn the adjacency matrix to topological overlap matrix(TOM) to minimize the effects of noise and spurious associations
TOM <- TOMsimilarity(adjacency.matrix, TOMType = "signed")
dissTOM <- 1 - TOM

#set diagonal to NA to remove uninformative correlations
diag(adjacency.matrix) <- NA

# Adjacency matrix heatmap plot / network heatmap of selected genes----------------------------------------------------------------------------------------------------
heatmap_indices <- sample(nrow(adjacency.matrix), 500) # sub-sample for visualization purposes

heatmap.2(t(adjacency.matrix[heatmap_indices, heatmap_indices]),
          col=redgreen(75),
          labRow=NA, labCol=NA, 
          trace='none', dendrogram='row',
          xlab='Gene', ylab='Gene',
          main='Adjacency matrix',
          density.info='none', revC=TRUE)
dev.off()



# remove adjacency matrix to free up memory---------------------------------------------------------------------------------------------------------------------------
rm(adjacency.matrix)
gc() #garbage collection for cleanup

################################################################
## Detecting co-expression modules in R
################################################################

# view the dendrogram based on hierachical clustering of genes---------------------------------------------------------------------------------------------------------
gene.tree <- flashClust(as.dist(dissTOM), method = "average")

sizeGrWindow(12,9) #open graphical window
plot(gene.tree, xlab="", sub="", main = "Gene clustering based on TOM dissimilarity", 
     labels = FALSE, hang = 0.04)


# identify the modules-------------------------------------------------------------------------------------------------------------------------------------------------
module.labels <- cutreeDynamicTree(gene.tree, deepSplit = FALSE, 
                                   minModuleSize = 30)

# convert labels to colours
module.colours <- labels2colors(module.labels)

# view
table(module.colours)

# visualize the gene tree and TOM matrix together using TOM plot
# if necessary, raise dissTOM to a power to make moderately strong connection more visible in heatmap
diag(dissTOM) <- NA

# plot gene dendrogram-------------------------------------------------------------------------------------------------------------------------------------------------
sizeGrWindow(8,6) #open graphical window
plotDendroAndColors(gene.tree, module.colours, "Dynamic Tree Cut", dendroLabels = FALSE,
                    hang = 0.03, addGuide = TRUE, guideHang = 0.05,
                    main = "Gene dendrogram and module colours")

#Calculating eigengenes------------------------------------------------------------------------------------------------------------------------------------------------
MEList = moduleEigengenes(network.counts, colors = module.colours)
MEs = MEList$eigengenes

#Calculating the module dissimilarity eigengenes
MEDiss = 1-cor(MEs)

#Clustering the eigengenes modules-------------------------------------------------------------------------------------------------------------------------------------
METree = hclust(as.dist(MEDiss), method = "average")
#Plotting the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
     xlab = "", sub = "")

MEDissThres = 0.25

# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")

# Call an automatic merging function-----------------------------------------------------------------------------------------------------------------------------------
merge = mergeCloseModules(network.counts, module.colours, cutHeight = MEDissThres, verbose = 3)

# The merged module colors
mergedColors = merge$colors;

# Eigengenes of the new merged 
mergedMEs = merge$newMEs;

#view the merged modules and number of genes per module----------------------------------------------------------------------------------------------------------------
table(mergedColors)

sizeGrWindow(12, 9)
#pdf(file = "Plots/geneDendro-3.pdf", wi = 9, he = 6)
plotDendroAndColors(gene.tree, cbind(module.colours, mergedColors),
                    c("Dynamic Tree Cut", "Merged dynamic"),dendroLabels = FALSE,
                    hang = 0.03,addGuide = TRUE, 
                    guideHang = 0.05)
                   

# get hub genes--------------------------------------------------------------------------------------------------------------------------------------------------------
module.hub.genes <- chooseTopHubInEachModule(network.counts, mergedColors, 
                                             power = 4,type = "signed")

# # A list of module hub genes
module.hub.genes

##############################################################################
## Network export to cytoscape
##############################################################################
# obtain gene ids
genes = colnames(network.counts)

# select module genes
inModule = is.finite(match(mergedColors, mergedColors))
modGenes = genes[inModule] 

# select the corresponding dissTOM based on module genes
modTOM = TOM[inModule, inModule]
dimnames(modTOM) = list(modGenes, modGenes)

#export edge and node file for visualization in cytoscape-------------------------------------------------------------------------------------------------------------
exportNetworkToCytoscape(modTOM,
                         edgeFile = "CytoscapeEdgeFilearabiensis.txt",
                         nodeFile = "CytoscapeNodeFilearabiensis.txt",
                         weighted = TRUE,
                         threshold = 0.1,
                         nodeNames = modGenes,
                         nodeAttr = mergedColors[inModule])

